{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yania\\\\OneDrive\\\\Desktop\\\\Septimo Semestre\\\\Ingeniria Web\\\\react-app\\\\src\\\\MemeGenerator.js\";\n// Import React (Mandatory Step).\nimport React from \"react\"; // MemeGenerator component to generate a meme\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      allMemeImgs: [],\n      randomImg: \"\"\n    };\n\n    this.handleChange = event => {\n      // Destructuring the event. target object\n      const {\n        name,\n        value\n      } = event.target; // Updating the state variable\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        allMemeImgs\n      } = this.state;\n      const rand = allMemeImgs[Math.floor(Math.random() * allMemeImgs.length)].url;\n      this.setState({\n        randomImg: rand\n      });\n    };\n  }\n\n  // componentDidMount() method to fetch\n  // images from the API\n  componentDidMount() {\n    // Fetching data from the API\n    fetch(\"https://api.imgflip.com/get_memes\") // Converting the promise recieved into JSON\n    .then(response => response.json()).then(content => // Updating state variables\n    this.setState({\n      allMemeImgs: content.data.memes\n    }));\n  } // Method to change the value of input fields\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"// Controlled form\", /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.handleSubmit,\n        children: [\"// Input field to get First text\", /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter Text\",\n          type: \"text\",\n          value: this.state.topText,\n          name: \"topText\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), \"// Input field to get Lsst text\", /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter Text\",\n          type: \"text\",\n          value: this.state.bottomText,\n          name: \"bottomText\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), \"// Button to generate meme\", /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [\"// Only show the below elements when the image is ready to be displayed\", this.state.randomImg === \"\" ? \"\" : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.randomImg,\n          alt: \"meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), this.state.randomImg === \"\" ? \"\" : /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"top\",\n          children: this.state.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), this.state.randomImg === \"\" ? \"\" : /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bottom\",\n          children: this.state.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"names":["React","MemeGenerator","Component","state","topText","bottomText","allMemeImgs","randomImg","handleChange","event","name","value","target","setState","handleSubmit","preventDefault","rand","Math","floor","random","length","url","componentDidMount","fetch","then","response","json","content","data","memes","render"],"sources":["C:/Users/yania/OneDrive/Desktop/Septimo Semestre/Ingeniria Web/react-app/src/MemeGenerator.js"],"sourcesContent":["// Import React (Mandatory Step).\r\nimport React from \"react\";\r\n \r\n// MemeGenerator component to generate a meme\r\nclass MemeGenerator extends React.Component {\r\n  state = {\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    allMemeImgs: [],\r\n    randomImg: \"\"\r\n  };\r\n \r\n  // componentDidMount() method to fetch\r\n  // images from the API\r\n  componentDidMount() {\r\n     \r\n    // Fetching data from the API\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      // Converting the promise recieved into JSON\r\n      .then(response => response.json())\r\n      .then(content =>\r\n          // Updating state variables\r\n        this.setState({\r\n          allMemeImgs: content.data.memes\r\n        })\r\n      );\r\n  }\r\n \r\n  // Method to change the value of input fields\r\n  handleChange = event => {\r\n    // Destructuring the event. target object\r\n    const { name, value } = event.target;\r\n     \r\n    // Updating the state variable\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n \r\n  // Method to submit from and create meme\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { allMemeImgs } = this.state;\r\n    const rand =\r\n      allMemeImgs[Math.floor(Math.random()\r\n      * allMemeImgs.length)].url;\r\n    this.setState({\r\n      randomImg: rand\r\n    });\r\n  };\r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        // Controlled form\r\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n          // Input field to get First text\r\n          <input\r\n            placeholder=\"Enter Text\"\r\n            type=\"text\"\r\n            value={this.state.topText}\r\n            name=\"topText\"\r\n            onChange={this.handleChange}\r\n          />\r\n          // Input field to get Lsst text\r\n          <input\r\n            placeholder=\"Enter Text\"\r\n            type=\"text\"\r\n            value={this.state.bottomText}\r\n            name=\"bottomText\"\r\n            onChange={this.handleChange}\r\n          />\r\n          // Button to generate meme\r\n          <button>Generate</button>\r\n        </form>\r\n \r\n        <br />\r\n        <div className=\"meme\">\r\n          // Only show the below elements when the image is ready to be displayed\r\n          {this.state.randomImg === \"\" ? \"\" :\r\n            <img src={this.state.randomImg} alt=\"meme\" />}\r\n          {this.state.randomImg === \"\" ? \"\" :\r\n            <h2 className=\"top\">{this.state.topText}</h2>}\r\n          {this.state.randomImg === \"\" ? \"\" :\r\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemeGenerator;"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;;;AACA,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;EAAA;IAAA;IAAA,KAC1CC,KAD0C,GAClC;MACNC,OAAO,EAAE,EADH;MAENC,UAAU,EAAE,EAFN;MAGNC,WAAW,EAAE,EAHP;MAINC,SAAS,EAAE;IAJL,CADkC;;IAAA,KAyB1CC,YAzB0C,GAyB3BC,KAAK,IAAI;MACtB;MACA,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkBF,KAAK,CAACG,MAA9B,CAFsB,CAItB;;MACA,KAAKC,QAAL,CAAc;QACZ,CAACH,IAAD,GAAQC;MADI,CAAd;IAGD,CAjCyC;;IAAA,KAoC1CG,YApC0C,GAoC3BL,KAAK,IAAI;MACtBA,KAAK,CAACM,cAAN;MACA,MAAM;QAAET;MAAF,IAAkB,KAAKH,KAA7B;MACA,MAAMa,IAAI,GACRV,WAAW,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KACrBb,WAAW,CAACc,MADF,CAAD,CAAX,CACuBC,GAFzB;MAGA,KAAKR,QAAL,CAAc;QACZN,SAAS,EAAES;MADC,CAAd;IAGD,CA7CyC;EAAA;;EAQ1C;EACA;EACAM,iBAAiB,GAAG;IAElB;IACAC,KAAK,CAAC,mCAAD,CAAL,CACE;IADF,CAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGGF,IAHH,CAGQG,OAAO,IACT;IACF,KAAKd,QAAL,CAAc;MACZP,WAAW,EAAEqB,OAAO,CAACC,IAAR,CAAaC;IADd,CAAd,CALJ;EASD,CAtByC,CAwB1C;;;EAuBAC,MAAM,GAAG;IACP,oBACE;MAAA,8CAEE;QAAM,SAAS,EAAC,WAAhB;QAA4B,QAAQ,EAAE,KAAKhB,YAA3C;QAAA,4DAEE;UACE,WAAW,EAAC,YADd;UAEE,IAAI,EAAC,MAFP;UAGE,KAAK,EAAE,KAAKX,KAAL,CAAWC,OAHpB;UAIE,IAAI,EAAC,SAJP;UAKE,QAAQ,EAAE,KAAKI;QALjB;UAAA;UAAA;UAAA;QAAA,QAFF,kDAUE;UACE,WAAW,EAAC,YADd;UAEE,IAAI,EAAC,MAFP;UAGE,KAAK,EAAE,KAAKL,KAAL,CAAWE,UAHpB;UAIE,IAAI,EAAC,YAJP;UAKE,QAAQ,EAAE,KAAKG;QALjB;UAAA;UAAA;UAAA;QAAA,QAVF,6CAkBE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAlBF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAuBE;QAAA;QAAA;QAAA;MAAA,QAvBF,eAwBE;QAAK,SAAS,EAAC,MAAf;QAAA,sFAEG,KAAKL,KAAL,CAAWI,SAAX,KAAyB,EAAzB,GAA8B,EAA9B,gBACC;UAAK,GAAG,EAAE,KAAKJ,KAAL,CAAWI,SAArB;UAAgC,GAAG,EAAC;QAApC;UAAA;UAAA;UAAA;QAAA,QAHJ,EAIG,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,EAAzB,GAA8B,EAA9B,gBACC;UAAI,SAAS,EAAC,KAAd;UAAA,UAAqB,KAAKJ,KAAL,CAAWC;QAAhC;UAAA;UAAA;UAAA;QAAA,QALJ,EAMG,KAAKD,KAAL,CAAWI,SAAX,KAAyB,EAAzB,GAA8B,EAA9B,gBACC;UAAI,SAAS,EAAC,QAAd;UAAA,UAAwB,KAAKJ,KAAL,CAAWE;QAAnC;UAAA;UAAA;UAAA;QAAA,QAPJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAxBF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAoCD;;AApFyC;;AAuF5C,eAAeJ,aAAf"},"metadata":{},"sourceType":"module"}